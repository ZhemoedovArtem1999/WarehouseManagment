// <auto-generated />
using System;
using DataAccessLayer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250812155438_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DataAccessLayer.Models.Balance", b =>
                {
                    b.Property<int>("ResourceId")
                        .HasColumnType("integer")
                        .HasColumnName("resource_id");

                    b.Property<int>("UnitId")
                        .HasColumnType("integer")
                        .HasColumnName("unit_id");

                    b.Property<decimal>("Count")
                        .HasColumnType("numeric")
                        .HasColumnName("count");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.HasKey("ResourceId", "UnitId")
                        .HasName("balance_pkey");

                    b.HasIndex(new[] { "UnitId" }, "IX_balance_unit_id");

                    b.HasIndex(new[] { "Id" }, "balance_id_unique")
                        .IsUnique();

                    b.ToTable("balance", "warehouse");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<bool>("Archive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("archive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("client_pkey");

                    b.HasIndex(new[] { "Name" }, "client_name_idx")
                        .HasAnnotation("Npgsql:StorageParameter:deduplicate_items", "true");

                    b.ToTable("client", "warehouse");
                });

            modelBuilder.Entity("DataAccessLayer.Models.ReceiptDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("number");

                    b.HasKey("Id")
                        .HasName("receipt_document_pkey");

                    b.HasIndex(new[] { "Number" }, "receipt_document_number_idx")
                        .HasAnnotation("Npgsql:StorageParameter:deduplicate_items", "true");

                    b.ToTable("receipt_document", "warehouse");
                });

            modelBuilder.Entity("DataAccessLayer.Models.ReceiptResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Count")
                        .HasColumnType("numeric")
                        .HasColumnName("count");

                    b.Property<int>("DocumentId")
                        .HasColumnType("integer")
                        .HasColumnName("document_id");

                    b.Property<int>("ResourceId")
                        .HasColumnType("integer")
                        .HasColumnName("resource_id");

                    b.Property<int>("UnitId")
                        .HasColumnType("integer")
                        .HasColumnName("unit_id");

                    b.HasKey("Id")
                        .HasName("receipt_resource_pkey");

                    b.HasIndex(new[] { "DocumentId" }, "IX_receipt_resource_document_id");

                    b.HasIndex(new[] { "ResourceId" }, "IX_receipt_resource_resource_id");

                    b.HasIndex(new[] { "UnitId" }, "IX_receipt_resource_unit_id");

                    b.ToTable("receipt_resource", "warehouse");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Resource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Archive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("archive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("resource_pkey");

                    b.HasIndex(new[] { "Name" }, "resource_name_idx")
                        .HasAnnotation("Npgsql:StorageParameter:deduplicate_items", "true");

                    b.ToTable("resource", "warehouse");
                });

            modelBuilder.Entity("DataAccessLayer.Models.SnipmentDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("number");

                    b.Property<bool>("Sign")
                        .HasColumnType("boolean")
                        .HasColumnName("sign");

                    b.HasKey("Id")
                        .HasName("snipment_document_pkey");

                    b.HasIndex(new[] { "ClientId" }, "IX_snipment_document_client_id");

                    b.HasIndex(new[] { "Number" }, "snipment_document_number_idx")
                        .HasAnnotation("Npgsql:StorageParameter:deduplicate_items", "true");

                    b.ToTable("snipment_document", "warehouse");
                });

            modelBuilder.Entity("DataAccessLayer.Models.SnipmentResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Count")
                        .HasColumnType("numeric")
                        .HasColumnName("count");

                    b.Property<int>("DocumentId")
                        .HasColumnType("integer")
                        .HasColumnName("document_id");

                    b.Property<int>("ResourceId")
                        .HasColumnType("integer")
                        .HasColumnName("resource_id");

                    b.Property<int>("UnitId")
                        .HasColumnType("integer")
                        .HasColumnName("unit_id");

                    b.HasKey("Id")
                        .HasName("snipment_resource_pkey");

                    b.HasIndex(new[] { "DocumentId" }, "IX_snipment_resource_document_id");

                    b.HasIndex(new[] { "ResourceId" }, "IX_snipment_resource_resource_id");

                    b.HasIndex(new[] { "UnitId" }, "IX_snipment_resource_unit_id");

                    b.ToTable("snipment_resource", "warehouse");
                });

            modelBuilder.Entity("DataAccessLayer.Models.UnitMeasurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Archive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("archive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("unit_measurement_pkey");

                    b.HasIndex(new[] { "Name" }, "unit_measurement_name_idx")
                        .HasAnnotation("Npgsql:StorageParameter:deduplicate_items", "true");

                    b.ToTable("unit_measurement", "warehouse");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Balance", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Resource", "Resource")
                        .WithMany("Balances")
                        .HasForeignKey("ResourceId")
                        .IsRequired()
                        .HasConstraintName("balance_resource_id_fkey");

                    b.HasOne("DataAccessLayer.Models.UnitMeasurement", "Unit")
                        .WithMany("Balances")
                        .HasForeignKey("UnitId")
                        .IsRequired()
                        .HasConstraintName("balance_unit_id_fkey");

                    b.Navigation("Resource");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("DataAccessLayer.Models.ReceiptResource", b =>
                {
                    b.HasOne("DataAccessLayer.Models.ReceiptDocument", "Document")
                        .WithMany("ReceiptResources")
                        .HasForeignKey("DocumentId")
                        .IsRequired()
                        .HasConstraintName("receipt_resource_document_id_fkey");

                    b.HasOne("DataAccessLayer.Models.Resource", "Resource")
                        .WithMany("ReceiptResources")
                        .HasForeignKey("ResourceId")
                        .IsRequired()
                        .HasConstraintName("receipt_resource_resource_id_fkey");

                    b.HasOne("DataAccessLayer.Models.UnitMeasurement", "Unit")
                        .WithMany("ReceiptResources")
                        .HasForeignKey("UnitId")
                        .IsRequired()
                        .HasConstraintName("receipt_resource_unit_id_fkey");

                    b.Navigation("Document");

                    b.Navigation("Resource");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("DataAccessLayer.Models.SnipmentDocument", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Client", "Client")
                        .WithMany("SnipmentDocuments")
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("snipment_document_client_id_fkey");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("DataAccessLayer.Models.SnipmentResource", b =>
                {
                    b.HasOne("DataAccessLayer.Models.SnipmentDocument", "Document")
                        .WithMany("SnipmentResources")
                        .HasForeignKey("DocumentId")
                        .IsRequired()
                        .HasConstraintName("snipment_resource_document_id_fkey");

                    b.HasOne("DataAccessLayer.Models.Resource", "Resource")
                        .WithMany("SnipmentResources")
                        .HasForeignKey("ResourceId")
                        .IsRequired()
                        .HasConstraintName("snipment_resource_resource_id_fkey");

                    b.HasOne("DataAccessLayer.Models.UnitMeasurement", "Unit")
                        .WithMany("SnipmentResources")
                        .HasForeignKey("UnitId")
                        .IsRequired()
                        .HasConstraintName("snipment_resource_unit_id_fkey");

                    b.Navigation("Document");

                    b.Navigation("Resource");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Client", b =>
                {
                    b.Navigation("SnipmentDocuments");
                });

            modelBuilder.Entity("DataAccessLayer.Models.ReceiptDocument", b =>
                {
                    b.Navigation("ReceiptResources");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Resource", b =>
                {
                    b.Navigation("Balances");

                    b.Navigation("ReceiptResources");

                    b.Navigation("SnipmentResources");
                });

            modelBuilder.Entity("DataAccessLayer.Models.SnipmentDocument", b =>
                {
                    b.Navigation("SnipmentResources");
                });

            modelBuilder.Entity("DataAccessLayer.Models.UnitMeasurement", b =>
                {
                    b.Navigation("Balances");

                    b.Navigation("ReceiptResources");

                    b.Navigation("SnipmentResources");
                });
#pragma warning restore 612, 618
        }
    }
}
